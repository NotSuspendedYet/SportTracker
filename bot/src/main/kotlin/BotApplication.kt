package bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.text
import com.github.kotlintelegrambot.entities.ChatId.Companion.fromId
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.logging.LogLevel
import data.AbsWorkoutRepositoryImpl
import data.DatabaseFactory
import data.PullUpWorkoutRepositoryImpl
import data.SwimmingWorkoutRepositoryImpl
import data.UserRepositoryImpl
import io.ktor.serialization.kotlinx.json.json
import io.ktor.server.application.call
import io.ktor.server.application.install
import io.ktor.server.engine.embeddedServer
import io.ktor.server.netty.Netty
import io.ktor.server.plugins.contentnegotiation.ContentNegotiation
import io.ktor.server.response.respondText
import io.ktor.server.routing.get
import io.ktor.server.routing.routing
import kotlinx.coroutines.launch
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.ConcurrentHashMap

private val mainMenu = KeyboardReplyMarkup(
    keyboard = listOf(
        listOf(
            KeyboardButton(text = "üèä –ë–∞—Å—Å–µ–π–Ω"),
            KeyboardButton(text = "üèãÔ∏è –¢—É—Ä–Ω–∏–∫"),
            KeyboardButton(text = "ü¶æ –ü—Ä–µ—Å—Å")
        ),
        listOf(
            KeyboardButton(text = "üìä –û—Ç—á—ë—Ç")
        )
    ),
    resizeKeyboard = true
)

private val cancelMenu = KeyboardReplyMarkup(
    keyboard = listOf(
        listOf(KeyboardButton(text = "‚ùå –û—Ç–º–µ–Ω–∞"))
    ),
    resizeKeyboard = true
)

fun main() {
    val botToken = System.getenv("BOT_TOKEN") ?: error("BOT_TOKEN not set")
    val dbUrl = System.getenv("DATABASE_URL") ?: error("DATABASE_URL not set")

    DatabaseFactory.init(dbUrl)
    val userRepo = UserRepositoryImpl()
    val swimmingRepo = SwimmingWorkoutRepositoryImpl()
    val pullupRepo = PullUpWorkoutRepositoryImpl()
    val absRepo = AbsWorkoutRepositoryImpl()

    val dialogState = ConcurrentHashMap<Long, DialogState>()

    val bot = Bot.Builder()
        .apply {
            token = botToken
            logLevel = LogLevel.Network.Body
            dispatch {
                command("start") {
                    bot.sendMessage(
                        chatId = fromId(message.chat.id),
                        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                        replyMarkup = mainMenu
                    )
                }
                text {
                    val userId = message.from?.id ?: return@text
                    val state = dialogState[userId]
                    when {
                        text == "üèä –ë–∞—Å—Å–µ–π–Ω" -> {
                            dialogState[userId] = DialogState.Swim_Distance
                            bot.sendMessage(
                                chatId = fromId(message.chat.id),
                                text = "–í–≤–µ–¥–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (–≤ –º–µ—Ç—Ä–∞—Ö):",
                                replyMarkup = cancelMenu
                            )
                        }
                        text == "üèãÔ∏è –¢—É—Ä–Ω–∏–∫" -> {
                            dialogState[userId] = DialogState.PullUp_Total
                            bot.sendMessage(
                                chatId = fromId(message.chat.id),
                                text = "–í–≤–µ–¥–∏ –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π:",
                                replyMarkup = cancelMenu
                            )
                        }
                        text == "ü¶æ –ü—Ä–µ—Å—Å" -> {
                            val user = userRepo.getOrCreateByTelegramId(userId)
                            absRepo.addAbsWorkout(user.id, LocalDateTime.now())
                            bot.sendMessage(
                                chatId = fromId(message.chat.id),
                                text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                                replyMarkup = mainMenu
                            )
                        }
                        text == "üìä –û—Ç—á—ë—Ç" -> {
                            val user = userRepo.getOrCreateByTelegramId(userId)
                            val swimList = swimmingRepo.getAllByUser(user.id)
                            val pullupList = pullupRepo.getAllByUser(user.id)
                            val absList = absRepo.getAllByUser(user.id)
                            val formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")

                            val swimReport = if (swimList.isEmpty()) "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –±–∞—Å—Å–µ–π–Ω—É." else swimList.joinToString("\n\n") {
                                "${it.date.format(formatter)}\n–î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${it.distance} –º\n–í—Ä–µ–º—è: ${it.formattedTotalTime}" +
                                (it.paddlesDistance?.let { pd -> "\n–° –ª–æ–ø–∞—Ç–∫–∞–º–∏: $pd –º" } ?: "") +
                                (it.best50mTime?.let { b50 -> "\n–õ—É—á—à–∏–µ 50–º: $b50 —Å–µ–∫" } ?: "")
                            }
                            val pullupReport = if (pullupList.isEmpty()) "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç—É—Ä–Ω–∏–∫—É." else pullupList.joinToString("\n\n") {
                                "${it.date.format(formatter)}\n–í—Å–µ–≥–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π: ${it.totalPullUps}\n–ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ–¥—Ö–æ–¥: ${it.maxPullUpsInSet}"
                            }
                            val absReport = if (absList.isEmpty()) "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –ø—Ä–µ—Å—Å—É." else "–î–∞—Ç—ã: " + absList.joinToString(", ") { it.date.format(formatter) } + "\n–í—Å–µ–≥–æ: ${absList.size}"
                            bot.sendMessage(
                                chatId = fromId(message.chat.id),
                                text = "üèä –ë–∞—Å—Å–µ–π–Ω:\n$swimReport\n\nüèãÔ∏è –¢—É—Ä–Ω–∏–∫:\n$pullupReport\n\nü¶æ –ü—Ä–µ—Å—Å:\n$absReport",
                                replyMarkup = mainMenu
                            )
                        }
                        text == "‚ùå –û—Ç–º–µ–Ω–∞" && state != null -> {
                            dialogState.remove(userId)
                            bot.sendMessage(
                                chatId = fromId(message.chat.id),
                                text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                                replyMarkup = mainMenu
                            )
                        }
                        state is DialogState.Swim_Distance -> {
                            val distance = text.toIntOrNull()
                            if (distance == null || distance <= 0) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Ç—Ä–æ–≤.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                dialogState[userId] = DialogState.Swim_TotalTime(distance)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏ –æ–±—â–µ–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):",
                                    replyMarkup = cancelMenu
                                )
                            }
                        }
                        state is DialogState.Swim_TotalTime -> {
                            val totalTime = text.toIntOrNull()
                            if (totalTime == null || totalTime <= 0) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                dialogState[userId] = DialogState.Swim_Paddles(state.distance, totalTime)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–î–∏—Å—Ç–∞–Ω—Ü–∏—è —Å –ª–æ–ø–∞—Ç–∫–∞–º–∏ (–º), –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ ‚Äî –Ω–∞–ø–∏—à–∏ 0:",
                                    replyMarkup = cancelMenu
                                )
                            }
                        }
                        state is DialogState.Swim_Paddles -> {
                            val paddles = text.toIntOrNull()
                            if (paddles == null || paddles < 0) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                dialogState[userId] = DialogState.Swim_Best50(state.distance, state.totalTime, if (paddles == 0) null else paddles)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è 50–º (—Å–µ–∫), –µ—Å–ª–∏ –Ω–µ –∑–∞–º–µ—Ä—è–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏ 0:",
                                    replyMarkup = cancelMenu
                                )
                            }
                        }
                        state is DialogState.Swim_Best50 -> {
                            val best50 = text.toIntOrNull()
                            if (best50 == null || best50 < 0) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ 0 –∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                val user = userRepo.getOrCreateByTelegramId(userId)
                                swimmingRepo.addSwimmingWorkout(
                                    user.id,
                                    state.distance,
                                    state.totalTime,
                                    state.paddlesDistance,
                                    if (best50 == 0) null else best50,
                                    LocalDateTime.now()
                                )
                                dialogState.remove(userId)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞—Å—Å–µ–π–Ω—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                                    replyMarkup = mainMenu
                                )
                            }
                        }
                        state is DialogState.PullUp_Total -> {
                            val total = text.toIntOrNull()
                            if (total == null || total <= 0) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                dialogState[userId] = DialogState.PullUp_Max(total)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥:",
                                    replyMarkup = cancelMenu
                                )
                            }
                        }
                        state is DialogState.PullUp_Max -> {
                            val max = text.toIntOrNull()
                            if (max == null || max <= 0 || max > state.total) {
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–µ –±–æ–ª—å—à–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
                                    replyMarkup = cancelMenu
                                )
                            } else {
                                val user = userRepo.getOrCreateByTelegramId(userId)
                                pullupRepo.addPullUpWorkout(
                                    user.id,
                                    state.total,
                                    max,
                                    LocalDateTime.now()
                                )
                                dialogState.remove(userId)
                                bot.sendMessage(
                                    chatId = fromId(message.chat.id),
                                    text = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç—É—Ä–Ω–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                                    replyMarkup = mainMenu
                                )
                            }
                        }
                        else -> {
                            // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
                        }
                    }
                }
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                command("start") {
                    bot.sendMessage(
                        chatId = fromId(message.chat.id),
                        text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                        replyMarkup = mainMenu
                    )
                }
            }
        }
        .build()

    embeddedServer(Netty, System.getenv("PORT")?.toInt() ?: 8080) {
        install(ContentNegotiation) { json() }
        routing {
            get("/") { call.respondText("SportTracker Bot is running!") }
        }
        launch {
            bot.startPolling()
        }
    }.start(wait = true)
}

sealed class DialogState {
    // –ë–∞—Å—Å–µ–π–Ω
    data object Swim_Distance : DialogState()
    data class Swim_TotalTime(val distance: Int) : DialogState()
    data class Swim_Paddles(val distance: Int, val totalTime: Int) : DialogState()
    data class Swim_Best50(val distance: Int, val totalTime: Int, val paddlesDistance: Int?) : DialogState()
    // –¢—É—Ä–Ω–∏–∫
    data object PullUp_Total : DialogState()
    data class PullUp_Max(val total: Int) : DialogState()
    data object Abs_Add : DialogState()
} 